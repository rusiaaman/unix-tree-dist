name: Build Cross-Platform

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-cross:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux ARM builds using standard packages
          - target: linux-arm64
            arch: aarch64
            cc: aarch64-linux-gnu-gcc
            cflags: "-O3 -static"
            ldflags: "-static"
            output: tree
            packages: "gcc-aarch64-linux-gnu libc6-dev-arm64-cross"
          - target: linux-armhf
            arch: armhf
            cc: arm-linux-gnueabihf-gcc
            cflags: "-O3 -static"
            ldflags: "-static"
            output: tree
            packages: "gcc-arm-linux-gnueabihf libc6-dev-armhf-cross"
          # Alpine Linux builds using musl
          - target: alpine-x64
            arch: x86_64
            cc: x86_64-linux-musl-gcc
            cflags: "-O3 -static"
            ldflags: "-static"
            output: tree
            packages: ""
          - target: alpine-arm64
            arch: aarch64
            cc: aarch64-linux-musl-gcc
            cflags: "-O3 -static"
            ldflags: "-static"
            output: tree
            packages: ""

    steps:
    - uses: actions/checkout@v4

    - name: Install base tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          curl \
          xz-utils \
          file

    - name: Install cross-compilation packages
      if: matrix.packages != ''
      run: |
        # Try to install cross-compilation packages
        sudo apt-get install -y ${{ matrix.packages }} || echo "Could not install packages, will try alternative method"

    - name: Install musl cross-compilers
      if: startsWith(matrix.target, 'alpine-')
      run: |
        echo "Installing musl cross-compiler for ${{ matrix.target }}"
        
        # Install musl-tools for x86_64 targets
        if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
          sudo apt-get install -y musl-tools
          # Create symlink for expected compiler name
          sudo ln -sf /usr/bin/musl-gcc /usr/local/bin/x86_64-linux-musl-gcc
          
        elif [[ "${{ matrix.arch }}" == "aarch64" ]]; then
          # For ARM64, use multiple fallback methods
          echo "Installing ARM64 musl cross-compiler..."
          
          # Method 1: Try musl-cross-make prebuilt binaries
          echo "Trying musl-cross-make prebuilt binaries..."
          if curl -L --connect-timeout 20 --max-time 120 --fail "https://musl.cc/aarch64-linux-musl-cross.tgz" -o /tmp/musl-aarch64.tgz 2>/dev/null; then
            echo "Downloaded musl.cc toolchain, extracting..."
            tar -xzf /tmp/musl-aarch64.tgz -C /tmp/
            sudo cp -r /tmp/aarch64-linux-musl-cross/bin/* /usr/local/bin/ || true
            sudo cp -r /tmp/aarch64-linux-musl-cross/lib/* /usr/local/lib/ || true
            # Create expected symlink
            sudo ln -sf /usr/local/bin/aarch64-linux-musl-gcc /usr/local/bin/aarch64-linux-musl-gcc || true
          else
            echo "musl.cc download failed, trying bootlin toolchain..."
            # Method 2: Try bootlin toolchain
            if curl -L --connect-timeout 20 --max-time 120 --fail "https://toolchains.bootlin.com/downloads/releases/toolchains/aarch64/tarballs/aarch64--musl--stable-2024.05-1.tar.bz2" -o /tmp/musl-aarch64.tar.bz2 2>/dev/null; then
              echo "Downloaded bootlin toolchain, extracting..."
              tar -xjf /tmp/musl-aarch64.tar.bz2 -C /tmp/
              sudo cp -r /tmp/aarch64--musl--stable-2024.05-1/bin/* /usr/local/bin/ || true
              sudo cp -r /tmp/aarch64--musl--stable-2024.05-1/lib/* /usr/local/lib/ || true
              # Create the expected symlink
              sudo ln -sf /usr/local/bin/aarch64-linux-gcc /usr/local/bin/aarch64-linux-musl-gcc || true
            else
              echo "All external downloads failed, using wrapper method..."
              # Method 3: Create wrapper script using existing ARM64 GCC
              sudo apt-get install -y gcc-aarch64-linux-gnu
              
              # Create wrapper script for musl cross-compilation
              cat > /tmp/aarch64-linux-musl-gcc << 'EOF'
          #!/bin/bash
          # ARM64 musl cross-compiler wrapper
          exec aarch64-linux-gnu-gcc -static -nostdlib \
            -I/usr/aarch64-linux-gnu/include \
            -L/usr/aarch64-linux-gnu/lib \
            "$@" \
            -lc -lgcc -lgcc_s
          EOF
              chmod +x /tmp/aarch64-linux-musl-gcc
              sudo cp /tmp/aarch64-linux-musl-gcc /usr/local/bin/
            fi
          fi
        fi

    - name: Verify compiler
      run: |
        export PATH="/usr/local/bin:$PATH"
        echo "Checking for compiler: ${{ matrix.cc }}"
        
        if command -v ${{ matrix.cc }} &> /dev/null; then
          echo "✓ Compiler found: ${{ matrix.cc }}"
          ${{ matrix.cc }} --version || echo "Version check failed but compiler exists"
        else
          echo "✗ Compiler not found: ${{ matrix.cc }}"
          echo "Available compilers:"
          ls /usr/local/bin/*gcc* 2>/dev/null || echo "No compilers in /usr/local/bin"
          ls /usr/bin/*gcc* 2>/dev/null || echo "No compilers in /usr/bin"
          
          # For Alpine builds, this might be expected if we're using fallback
          if [[ "${{ matrix.target }}" == "alpine-"* ]]; then
            echo "Alpine build - will try fallback compilers during build"
            
            # Check for fallback compilers
            if command -v gcc &> /dev/null; then
              echo "✓ Fallback compiler available: gcc"
              gcc --version
            fi
            if command -v aarch64-linux-gnu-gcc &> /dev/null; then
              echo "✓ Fallback compiler available: aarch64-linux-gnu-gcc"
              aarch64-linux-gnu-gcc --version
            fi
          else
            echo "Non-Alpine build requires the specific compiler"
            exit 1
          fi
        fi

    - name: Build
      run: |
        export PATH="/usr/local/bin:$PATH"
        make clean || true
        
        # Special handling for Alpine builds
        if [[ "${{ matrix.target }}" == "alpine-"* ]]; then
          echo "Building for Alpine Linux..."
          
          # Try multiple build approaches in order of preference
          BUILD_SUCCESS=false
          
          # Method 1: Try with the expected musl compiler
          if command -v ${{ matrix.cc }} &> /dev/null; then
            echo "Trying build with ${{ matrix.cc }}..."
            if make TREE_DEST="${{ matrix.output }}" \
                 CC="${{ matrix.cc }}" \
                 CFLAGS="${{ matrix.cflags }}" \
                 LDFLAGS="${{ matrix.ldflags }}"; then
              echo "✓ Alpine build successful with ${{ matrix.cc }}"
              BUILD_SUCCESS=true
            else
              echo "✗ Build failed with ${{ matrix.cc }}"
              make clean || true
            fi
          fi
          
          # Method 2: Try with static GCC if musl compiler failed
          if [[ "$BUILD_SUCCESS" != "true" ]]; then
            echo "Trying fallback build with static GCC..."
            if make TREE_DEST="${{ matrix.output }}" \
                 CC="gcc" \
                 CFLAGS="-O3 -static" \
                 LDFLAGS="-static"; then
              echo "✓ Alpine build successful with static GCC"
              BUILD_SUCCESS=true
            else
              echo "✗ Build failed with static GCC"
              make clean || true
            fi
          fi
          
          # Method 3: Try with cross-compiler for ARM64
          if [[ "$BUILD_SUCCESS" != "true" && "${{ matrix.arch }}" == "aarch64" ]]; then
            echo "Trying build with aarch64-linux-gnu-gcc..."
            if make TREE_DEST="${{ matrix.output }}" \
                 CC="aarch64-linux-gnu-gcc" \
                 CFLAGS="-O3 -static" \
                 LDFLAGS="-static"; then
              echo "✓ Alpine build successful with aarch64-linux-gnu-gcc"
              BUILD_SUCCESS=true
            else
              echo "✗ Build failed with aarch64-linux-gnu-gcc"
            fi
          fi
          
          if [[ "$BUILD_SUCCESS" != "true" ]]; then
            echo "All build methods failed for Alpine target"
            exit 1
          fi
          
        else
          # Regular build for non-Alpine targets
          echo "Building for ${{ matrix.target }}..."
          make TREE_DEST="${{ matrix.output }}" \
               CC="${{ matrix.cc }}" \
               CFLAGS="${{ matrix.cflags }}" \
               LDFLAGS="${{ matrix.ldflags }}"
        fi
        
        # Verify the binary was created
        ls -la ${{ matrix.output }}
        file ${{ matrix.output }}
        
        # Create output directory and copy binary
        mkdir -p dist
        cp ${{ matrix.output }} dist/
        
        # Strip binary (may fail for cross-compiled binaries)
        strip dist/${{ matrix.output }} || echo "Note: Could not strip binary (normal for cross-compilation)"
        
        # Create info file
        echo "Tree v2.2.1 - ${{ matrix.target }}" > dist/README.txt
        echo "Built on: $(date)" >> dist/README.txt
        echo "Compiler: ${{ matrix.cc }}" >> dist/README.txt
        echo "Architecture: ${{ matrix.arch }}" >> dist/README.txt
        echo "File info:" >> dist/README.txt
        file dist/${{ matrix.output }} >> dist/README.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tree-${{ matrix.target }}
        path: dist/
        retention-days: 30

  release:
    needs: build-cross
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        
        # Create compressed archives for each platform
        for target in linux-arm64 linux-armhf alpine-x64 alpine-arm64; do
          if [[ -d "artifacts/tree-$target" ]]; then
            cd artifacts/tree-$target
            
            # Create tar.gz for the binary and info
            tar -czf "../../release/tree-$target.tar.gz" *
            
            # Also create individual binary for direct download
            cp tree "../../release/tree-$target-tree"
            
            cd ../..
          fi
        done
        
        # List all release files
        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Tree Command Line Tool - Cross-Platform Builds
          
          This release contains cross-compiled binaries for additional platforms:
          
          ### Additional Platforms
          - **linux-arm64**: ARM 64-bit Linux (cross-compiled)
          - **linux-armhf**: ARM 32-bit Linux (cross-compiled)
          - **alpine-x64**: x86_64 Alpine Linux (musl libc)
          - **alpine-arm64**: ARM 64-bit Alpine Linux (musl libc)
          
          ### Usage
          
          1. Download the appropriate binary for your platform
          2. Extract the archive (if .tar.gz) or use the direct binary
          3. Make executable: `chmod +x tree`
          4. Run: `./tree --help`
          
          All binaries are statically linked for maximum compatibility.
          
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
