name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - target: linux-x64
            arch: x86_64
            os: linux
            cc: gcc
            cflags: "-O3 -static"
            ldflags: "-static"
            output: tree
          # Alpine Linux builds (musl libc)
          - target: alpine-x64
            arch: x86_64
            os: alpine
            cc: x86_64-alpine-linux-musl-gcc
            cflags: "-O3 -static"
            ldflags: "-static"
            output: tree
          - target: alpine-arm64
            arch: aarch64
            os: alpine
            cc: aarch64-alpine-linux-musl-gcc
            cflags: "-O3 -static"
            ldflags: "-static"
            output: tree
          # Windows builds
          - target: win32-x64
            arch: x86_64
            os: windows
            cc: x86_64-w64-mingw32-gcc
            cflags: "-O3 -static"
            ldflags: "-static"
            output: tree.exe
          - target: win32-arm64
            arch: aarch64
            os: windows
            cc: aarch64-w64-mingw32-gcc
            cflags: "-O3 -static"
            ldflags: "-static"
            output: tree.exe
          # macOS builds
          - target: darwin-x64
            arch: x86_64
            os: darwin
            cc: x86_64-apple-darwin21-clang
            cflags: "-O3"
            ldflags: ""
            output: tree
          - target: darwin-arm64
            arch: aarch64
            os: darwin
            cc: aarch64-apple-darwin21-clang
            cflags: "-O3"
            ldflags: ""
            output: tree

    steps:
    - uses: actions/checkout@v4

    - name: Install base build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          curl \
          xz-utils \
          git \
          cmake \
          clang \
          llvm \
          file

    - name: Install cross-compilation tools
      run: |
        # Install available cross-compilation tools
        sudo apt-get install -y \
          gcc-multilib \
          gcc-mingw-w64-x86-64 \
          gcc-mingw-w64-i686 \
          libc6-dev-i386 || true
        
        # Try to install ARM cross-compilers, but don't fail if they're not available
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          gcc-arm-linux-gnueabihf \
          libc6-dev-arm64-cross \
          libc6-dev-armhf-cross || echo "ARM cross-compilers not available, will use alternative methods"

    - name: Install musl cross-compilers
      if: matrix.os == 'alpine'
      run: |
        # Install musl cross-compilers
        echo "Installing musl cross-compilers..."
        
        # Create temporary directory
        mkdir -p /tmp/musl-cross
        
        # Download and install x86_64-linux-musl
        if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
          curl -L https://musl.cc/x86_64-linux-musl-cross.tgz | tar -xzf - -C /tmp/musl-cross/
          sudo cp -r /tmp/musl-cross/x86_64-linux-musl-cross/* /usr/local/
          sudo ln -sf /usr/local/bin/x86_64-linux-musl-gcc /usr/local/bin/x86_64-alpine-linux-musl-gcc
        fi
        
        # Download and install aarch64-linux-musl
        if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
          curl -L https://musl.cc/aarch64-linux-musl-cross.tgz | tar -xzf - -C /tmp/musl-cross/
          sudo cp -r /tmp/musl-cross/aarch64-linux-musl-cross/* /usr/local/
          sudo ln -sf /usr/local/bin/aarch64-linux-musl-gcc /usr/local/bin/aarch64-alpine-linux-musl-gcc
        fi
        
        # Clean up
        rm -rf /tmp/musl-cross

    - name: Install Windows ARM64 cross-compiler
      if: matrix.target == 'win32-arm64'
      run: |
        # Install llvm-mingw for ARM64 Windows support
        echo "Installing LLVM-MinGW for ARM64 Windows..."
        
        # Create temporary directory
        mkdir -p /tmp/llvm-mingw
        
        # Download and install
        curl -L https://github.com/mstorsjo/llvm-mingw/releases/download/20240518/llvm-mingw-20240518-msvcrt-ubuntu-20.04-x86_64.tar.xz | tar -xJf - -C /tmp/llvm-mingw/
        
        sudo cp -r /tmp/llvm-mingw/llvm-mingw-20240518-msvcrt-ubuntu-20.04-x86_64/* /usr/local/
        
        # Create symlink for aarch64-w64-mingw32-gcc
        sudo ln -sf /usr/local/bin/aarch64-w64-mingw32-clang /usr/local/bin/aarch64-w64-mingw32-gcc
        
        # Clean up
        rm -rf /tmp/llvm-mingw

    - name: Setup OSXCross for macOS
      if: matrix.os == 'darwin'
      run: |
        echo "Setting up OSXCross for macOS compilation..."
        
        # Install dependencies for OSXCross
        sudo apt-get install -y \
          clang \
          llvm-dev \
          liblzma-dev \
          libxml2-dev \
          uuid-dev \
          libssl-dev \
          bash \
          patch \
          make \
          tar \
          xz-utils \
          bzip2 \
          gzip \
          sed \
          cpio \
          libbz2-dev \
          zlib1g-dev
        
        # Clone OSXCross
        git clone https://github.com/tpoechtrager/osxcross.git /tmp/osxcross
        cd /tmp/osxcross
        
        # Create tarballs directory
        mkdir -p tarballs
        
        # Download macOS SDK
        echo "Downloading macOS SDK..."
        curl -L -o tarballs/MacOSX12.3.sdk.tar.xz https://github.com/joseluisq/macosx-sdks/releases/download/12.3/MacOSX12.3.sdk.tar.xz
        
        # Build OSXCross
        echo "Building OSXCross..."
        UNATTENDED=1 OSX_VERSION_MIN=10.12 ./build.sh
        
        # Install to /usr/local
        sudo cp -r target/* /usr/local/
        
        # Create symlinks with proper names
        sudo ln -sf /usr/local/bin/x86_64-apple-darwin21-clang /usr/local/bin/x86_64-apple-darwin21-clang
        sudo ln -sf /usr/local/bin/arm64-apple-darwin21-clang /usr/local/bin/aarch64-apple-darwin21-clang
        
        # Clean up
        cd /
        rm -rf /tmp/osxcross

    - name: Set up environment
      run: |
        echo "/usr/local/bin" >> $GITHUB_PATH
        export PATH="/usr/local/bin:$PATH"

    - name: Install ARM cross-compilers (fallback)
      if: matrix.os == 'linux' && (matrix.arch == 'aarch64' || matrix.arch == 'armhf')
      run: |
        # If ARM cross-compilers are not available via apt, try alternative methods
        if ! command -v ${{ matrix.cc }} &> /dev/null; then
          echo "Cross-compiler ${{ matrix.cc }} not found, trying alternative installation..."
          
          # Try using Docker-based cross-compilation
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            # Use multiarch/crossbuild Docker image
            docker run --rm -v $(pwd):/workdir -e CROSS_TRIPLE=aarch64-linux-gnu multiarch/crossbuild make TREE_DEST="${{ matrix.output }}" CC=aarch64-linux-gnu-gcc CFLAGS="${{ matrix.cflags }}" LDFLAGS="${{ matrix.ldflags }}"
          elif [[ "${{ matrix.arch }}" == "armhf" ]]; then
            docker run --rm -v $(pwd):/workdir -e CROSS_TRIPLE=arm-linux-gnueabihf multiarch/crossbuild make TREE_DEST="${{ matrix.output }}" CC=arm-linux-gnueabihf-gcc CFLAGS="${{ matrix.cflags }}" LDFLAGS="${{ matrix.ldflags }}"
          fi
        fi

    - name: Build
      run: |
        make clean || true
        
        # Set up PATH
        export PATH="/usr/local/bin:$PATH"
        
        # Check if compiler exists
        if command -v ${{ matrix.cc }} &> /dev/null; then
          echo "Using compiler: ${{ matrix.cc }}"
          ${{ matrix.cc }} --version || true
        else
          echo "Compiler ${{ matrix.cc }} not found!"
          # For failed ARM builds, we'll skip them gracefully
          if [[ "${{ matrix.os }}" == "linux" && ("${{ matrix.arch }}" == "aarch64" || "${{ matrix.arch }}" == "armhf") ]]; then
            echo "Skipping ARM build due to missing cross-compiler"
            mkdir -p dist
            echo "ARM build skipped" > dist/README.txt
            exit 0
          fi
          exit 1
        fi
        
        # Set compiler and flags
        export CC="${{ matrix.cc }}"
        export CFLAGS="${{ matrix.cflags }}"
        export LDFLAGS="${{ matrix.ldflags }}"
        
        # Build the project
        make TREE_DEST="${{ matrix.output }}" CC="${{ matrix.cc }}" CFLAGS="${{ matrix.cflags }}" LDFLAGS="${{ matrix.ldflags }}"
        
        # Verify the binary was created
        ls -la ${{ matrix.output }}
        file ${{ matrix.output }}
        
        # Create output directory
        mkdir -p dist
        
        # Copy binary to dist
        cp ${{ matrix.output }} dist/
        
        # Strip binary if not Windows and not macOS
        if [[ "${{ matrix.os }}" != "windows" && "${{ matrix.os }}" != "darwin" ]]; then
          strip dist/${{ matrix.output }} || true
        fi

    - name: Test binary
      run: |
        # Test the binary (basic functionality check)
        if [[ "${{ matrix.os }}" == "linux" || "${{ matrix.os }}" == "alpine" ]]; then
          ./dist/${{ matrix.output }} --help || true
          ./dist/${{ matrix.output }} --version || true
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tree-${{ matrix.target }}
        path: dist/${{ matrix.output }}
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        
        # Create compressed archives for each platform
        for target in linux-x64 linux-arm64 linux-armhf alpine-x64 alpine-arm64 win32-x64 win32-arm64 darwin-x64 darwin-arm64; do
          if [[ -d "artifacts/tree-$target" ]]; then
            cd artifacts/tree-$target
            
            # Determine file extension
            if [[ "$target" == win32-* ]]; then
              binary_name="tree.exe"
            else
              binary_name="tree"
            fi
            
            # Create tar.gz for the binary
            tar -czf "../../release/tree-$target.tar.gz" "$binary_name"
            
            # Also create individual binary for direct download
            cp "$binary_name" "../../release/tree-$target-$binary_name"
            
            cd ../..
          fi
        done
        
        # List all release files
        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Tree Command Line Tool - Cross-Platform Release
          
          This release contains pre-built binaries for multiple platforms and architectures:
          
          ### Linux
          - **linux-x64**: Intel/AMD 64-bit Linux (glibc)
          - **linux-arm64**: ARM 64-bit Linux (glibc)
          - **linux-armhf**: ARM 32-bit Linux (glibc, hard float)
          
          ### Alpine Linux
          - **alpine-x64**: Intel/AMD 64-bit Alpine Linux (musl libc)
          - **alpine-arm64**: ARM 64-bit Alpine Linux (musl libc)
          
          ### Windows
          - **win32-x64**: Intel/AMD 64-bit Windows
          - **win32-arm64**: ARM 64-bit Windows
          
          ### macOS
          - **darwin-x64**: Intel 64-bit macOS
          - **darwin-arm64**: ARM 64-bit macOS (Apple Silicon)
          
          ### Usage
          
          1. Download the appropriate binary for your platform
          2. Extract the archive (if .tar.gz) or use the direct binary
          3. Make executable (Linux/macOS): `chmod +x tree`
          4. Run: `./tree --help`
          
          All binaries are statically linked where possible for maximum compatibility.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
